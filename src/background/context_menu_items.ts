import {Selector} from "../shared/data.ts";
import {saveSelector} from "../api/selectors.ts";

// add listener for selectors generated by content scripts
chrome.runtime.onMessage.addListener(async (message, sender) => {
  console.log(message);
  if (message.selector !== undefined && message.selector.id !== undefined && message.cropping !== undefined) {
    console.log("data matched message");
    const dataUrl = await chrome.tabs.captureVisibleTab({format: 'png'});
    await chrome.tabs.sendMessage(sender.tab?.id as number, {selector: message.selector, cropping: message.cropping, dataUrl})
  }
  else if (message.selector !== undefined && message.selector.id !== undefined) {
    saveSelector(message.selector as Selector)
    .catch(err => console.log(err));
  }
  else if (message as string && message === 'StopGetSelector') {
    const tabs = await chrome.tabs.query({});
    tabs.forEach(tab => {
      if (tab.id) chrome.tabs.sendMessage(tab.id, 'StopGetSelector');
    });
  }
})

// define context menu items and onClick handler
export const menuItems: {
  id: string;
  contexts: chrome.contextMenus.ContextType[];
  title: string
  onClick: (info: chrome.contextMenus.OnClickData, tab?: chrome.tabs.Tab) => void;
}[] = [
  {
    id: 'netbuddy_start_get_selector',
    title: 'Start Get Selector',
    contexts: ['all'],
    onClick: async (info, tab) => {
      if (info && tab && tab.id) await chrome.tabs.sendMessage(tab.id, 'StartGetSelector');
    }
  },
  {
    id: 'netbuddy_stop_get_selector',
    title: 'Stop Get Selector',
    contexts: ['all'],
    onClick: async (info, tab) => {
      if (info && tab && tab.id) await chrome.tabs.sendMessage(tab.id, 'StopGetSelector');
    }  
  },
];