import {Selector} from "../shared/data.ts";
import {SaveSelector} from "../api/Selectors.ts";

// add listener for selectors generated by content scripts
chrome.runtime.onMessage.addListener(async message => {
  if (message as Selector && message.id !== undefined) {
    SaveSelector(message as Selector)
    .catch(err => console.log(err));
  }
  else if (message as string && message === 'StopGetSelector') {
    const tabs = await chrome.tabs.query({});
    tabs.forEach(tab => {
      if (tab.id) chrome.tabs.sendMessage(tab.id, 'StopGetSelector');
    });
  }
})

// define context menu items and onClick handler
export const menuItems: {
  id: string;
  contexts: chrome.contextMenus.ContextType[];
  title: string
  onClick: (info: chrome.contextMenus.OnClickData, tab?: chrome.tabs.Tab) => void;
}[] = [
  {
    id: 'netbuddy_start_get_selector',
    title: 'Start Get Selector',
    contexts: ['all'],
    onClick: async (info, tab) => {
      if (info && tab && tab.id) await chrome.tabs.sendMessage(tab.id, 'StartGetSelector');
    }
  },
  {
    id: 'netbuddy_stop_get_selector',
    title: 'Stop Get Selector',
    contexts: ['all'],
    onClick: async (info, tab) => {
      if (info && tab && tab.id) await chrome.tabs.sendMessage(tab.id, 'StopGetSelector');
    }  
  },
];